/*!
@class QtBackgroundProcess::Terminal

For every connected terminal, one instance of the Terminal class is created, and provided by
the app. The terminal allows interaction with each connected terminal, by receiving it's
stdin and sending data to it's stdout.

The Terminal implements the QIODevice interface. This allows easy integration into the
application. The terminal is a sequential device.

@sa App, App::connectedTerminals, GlobalTerminal
*/

/*!
@property QtBackgroundProcess::Terminal::starter

@default{<i>undefined</i>}

There will always be only one starter terminal per master process. It's arguments are passed
to the startup function.

@accessors{
	@readAc{isStarter()}
	@constantAc
}

@sa App::startupApp
*/

/*!
@property QtBackgroundProcess::Terminal::parser

@default{<i>A parser setup by the app and filled with the sent arguments.</i>}

You can use the parser to get the received options and arguments. It is wrapped inside a
QSharedPointer, because QCommandlineParser does not provide a copy constructor

@accessors{
	@readAc{parser()}
	@constantAc
}

@sa App::setupParser, App::commandReceived
*/

/*!
@property QtBackgroundProcess::Terminal::autoDelete

@default{App::autoDeleteTerminals}

If set to `true` the terminal will be automatically deleted, as soon as the terminal was
disconnected. If you need to access the terminal even after closing, you can disable it.

@accessors{
	@readAc{isAutoDelete()}
	@writeAc{setAutoDelete()}
}

@sa App::autoDeleteTerminals, Terminal::disconnectTerminal, Terminal::terminalDisconnected
*/

/*!
@fn QtBackgroundProcess::Terminal::disconnectTerminal

Softly disconnects the terminal by flushing it first and then closing it, waiting up to 500
milliseconds for data to be written.

@note disconnecting the terminal will **not** be closed! You can still read remaining data
from the terminal after disconnecting. For a full close, use the close() method.

@sa Terminal::close
*/
